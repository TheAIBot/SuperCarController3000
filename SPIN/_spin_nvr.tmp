never noPassingBarrierWithoutOthers {    /* !([] ((! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier)))) || (! (((Car[carPID[1]]@beforeBarrier)) || ((Car[carPID[2]]@beforeBarrier)))))) */
T0_init:
	do
	:: atomic { (! (((! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier)))) || (! (((Car[carPID[1]]@beforeBarrier)) || ((Car[carPID[2]]@beforeBarrier))))))) -> assert(!(! (((! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier)))) || (! (((Car[carPID[1]]@beforeBarrier)) || ((Car[carPID[2]]@beforeBarrier)))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
never testPassing {    /* !([] (! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier))))) */
T0_init:
	do
	:: atomic { (! ((! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier)))))) -> assert(!(! ((! ((((roundCount[0]>roundCount[1])) && ((roundCount[0]>roundCount[2]))) && ((Car[carPID[0]]@afterBarrier))))))) }
	:: (1) -> goto T0_init
	od;
accept_all:
	skip
}
