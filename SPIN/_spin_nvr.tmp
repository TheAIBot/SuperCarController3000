never notPassBarrier {    /* !([] ((! (([] (! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]])))) && ([] (isOn)))) || (! (<> ((Car[carPID[1]]@afterBarrier)))))) */
T0_init:
	do
	:: ((! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]]))) && ((Car[carPID[1]]@afterBarrier)) && (isOn)) -> goto accept_S11
	:: ((! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]]))) && (isOn)) -> goto T0_S14
	:: (1) -> goto T0_init
	od;
accept_S11:
	do
	:: ((! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]]))) && (isOn)) -> goto accept_S11
	od;
T0_S14:
	do
	:: ((! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]]))) && ((Car[carPID[1]]@afterBarrier)) && (isOn)) -> goto accept_S11
	:: ((! ((isInBarrier[carPID[1]]) && (isInBarrier[carPID[2]]))) && (isOn)) -> goto T0_S14
	od;
}
never passBarrier {    /* !([] ((! (((isInBarrier[carPID[1]]) && ((numberCarsAtBarrier==2))) && ([] (isOn)))) || (<> ((Car[carPID[1]]@afterBarrier))))) */
T0_init:
	do
	:: (! (((Car[carPID[1]]@afterBarrier))) && ((isInBarrier[carPID[1]]) && ((numberCarsAtBarrier==2))) && (isOn)) -> goto accept_S4
	:: (1) -> goto T0_init
	od;
accept_S4:
	do
	:: (! (((Car[carPID[1]]@afterBarrier))) && (isOn)) -> goto accept_S4
	od;
}
